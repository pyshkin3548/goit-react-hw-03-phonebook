{"version":3,"sources":["components/ContactListItem.js","components/ContactList.js","components/ContactEditor.js","components/Filter.js","components/App.js","index.js"],"names":["ContactListItem","name","number","onRemove","completed","onUpdate","type","onClick","ContactList","contacts","onRemoveContact","onUpdateContact","map","id","ContactEditor","state","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","this","onSubmit","placeholder","onChange","Component","Filter","onChangeFilter","App","filter","addContact","contact","uuid_v4","includes","alert","length","prevState","removeContact","contactId","changeFilter","console","log","getVisibleContacts","toLowerCase","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visableContacts","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d41bee7e.chunk.js","sourcesContent":["import React from 'react';\n\nconst ContactListItem = ({ name, number, completed, onRemove, onUpdate }) => (\n  <li>\n    <p>{name}</p>\n    <p>{number}</p>\n    <section>\n      <button type=\"button\" onClick={onRemove}>\n        Delete\n      </button>\n    </section>\n  </li>\n);\n\nexport default ContactListItem;\n","import React from 'react';\nimport ContactListItem from './ContactListItem';\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, onRemoveContact, onUpdateContact }) => (\n  <ul>\n    {contacts.map(({ id, name, number, completed }) => (\n      <ContactListItem\n        key={id}\n        name={name}\n        number={number}\n        completed={completed}\n        onRemove={() => onRemoveContact(id)}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n  })),\n}\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\nexport default class ContactEditor extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAddContact(this.state.name, this.state.number);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <br />\n          <input\n            type=\"text\"\n            value={name}\n            placeholder='Enter a name...'\n            onChange={this.handleChange}\n            name=\"name\"\n          />\n        </label>\n        <br/>\n        <label>\n          Number\n          <br />\n          <input\n            type=\"tel\"\n            value={number}\n            placeholder='Enter a number...'\n            onChange={this.handleChange}\n            name=\"number\"\n          />\n        </label>\n        <button type=\"submit\">Add Contact</button>\n      </form>\n    );\n  }\n}\nContactEditor.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nexport default function Filter ({value, onChangeFilter}){\n    return (\n        <div>\n           <input type=\"text\" \n           value={value} \n           placeholder='Search...'\n           onChange={e => onChangeFilter(e.target.value)}\n            />\n        </div>\n    )\n}\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onchangeFilter: PropTypes.func.isRequired,\n  };","import React, { Component } from 'react';\nimport ContactList from './ContactList';\nimport ContactEditor from './ContactEditor';\nimport { v4 as uuid_v4 } from 'uuid';\nimport Filter from './Filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    \n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    console.log(\"Contacts componentDidMount\");\n    const persistedContacts = localStorage.getItem('contacts')\n\n    if (persistedContacts) {\n      // console.log(persistedTasks)\n\n      this.setState({\n        contacts: JSON.parse(persistedContacts)\n      })\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"Contacts componentDidUpdate\");\n\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (name, number) => {\n    const contact = {\n      id: uuid_v4(),\n      name,\n      number,\n    };\n\n    const searchSameName = this.state.contacts\n      .map(contact => contact.name)\n      .includes(name);\n\n    if (searchSameName) {\n      alert(`${name} is already in contacts`);\n    } else if (name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      this.setState(prevState => {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      });\n    }\n  };\n\n  removeContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  changeFilter = filter => {\n    this.setState({ filter });\n    console.log(filter);\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const visableContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phone Book</h1>\n        <ContactEditor onAddContact={this.addContact} />\n        {visableContacts.length > 1 && (\n          <>\n            <h2>Contacts</h2>\n            <Filter value={filter} onChangeFilter={this.changeFilter} />\n          </>\n        )}\n        {visableContacts.length > 0 && (\n          <ContactList\n            contacts={visableContacts}\n            onRemoveContact={this.removeContact}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}